services:
  frontend:
    image: 905418051827.dkr.ecr.eu-central-1.amazonaws.com/frontend-for-test-app-dist:latest
    container_name: nc1-ui
    ports:
      - "3000:3000"
    networks:
      app_net:
        ipv4_address: 172.20.0.2
    depends_on:
      - backend

  backend:
    image: 905418051827.dkr.ecr.eu-central-1.amazonaws.com/backend-for-test-app-dist:latest
    container_name: nc1-api
    ports:
      - "3001:3001"
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=root
      - DB_PASS=1234
      - DB_NAME=test
    volumes:
      - ./tmp_static:/app/static
    networks:
      app_net:
        ipv4_address: 172.20.0.3
    depends_on:
      - mysql

  mysql:
    image: mysql:8.0
    container_name: nc1-db
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: test
    volumes:
      - ./mysql-data:/var/lib/mysql
    networks:
      app_net:
        ipv4_address: 172.20.0.4

  nginx:
    image: nginx:1.27
    container_name: nc1-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/ssl/server.crt:/etc/nginx/certs/server.crt
      - ./nginx/ssl/server.key:/etc/nginx/certs/server.key
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      app_net:
        ipv4_address: 172.20.0.5
    depends_on:
      - frontend
      - backend

  watchtower:
    image: containrrr/watchtower
    container_name: nc1-watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./config.json:/config.json
    environment:
      - WATCHTOWER_ECR=true
      - AWS_REGION=eu-central-1
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    command: --interval 45

networks:
  app_net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
